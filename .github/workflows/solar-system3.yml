name: Solar System CI Pipeline v3 "Fixed Artifact Upload"

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'features/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: superuser
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:

  # JOB 1: Unit Tests on Multiple Node.js Versions and OS
  unit-tests:
    name: Run Unit Tests
    strategy:
      matrix:
        node-version: [16, 18, 20]
        operating-system: [ubuntu-latest]
        # exclude:
        #   - node-version: 16
        #     operating-system: macos-latest
        exclude:
          - node-version: 16
            operating-system: ubuntu-latest

      fail-fast: false
    runs-on: ${{ matrix.operating-system }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js v${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        # always upload test results, even if tests fail
        if: always()
        with:
          # unique artifact name per matrix job
          name: test-results-${{ matrix.operating-system }}-node${{ matrix.node-version }}
          # path where mocha-junit-reporter actually generates test reports
          path: |
            test-results.xml
            *.xml
            reports/
          if-no-files-found: warn


# job 2: Code Coverage Report
  code-coverage:
    name: Code Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
        
          # Cache Dependencies To Reduce Build Time
      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-18-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Run code coverage
        continue-on-error: true
        run: npm run coverage

      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        # always upload coverage report, even if code coverage step fails, or Code Coverage is Less than Threshold
        if: always() 
        with:
          name: code-coverage-report
          path: |
            coverage/
            .nyc_output/
            coverage-summary.json
            cobertura-coverage.xml
          if-no-files-found: warn

          
# Job3 : Docker Login and Build & Push Image to Docker Hub and Github Container Registry
  Docker:
    name: Docker Login and Build & Push Image to Docker Hub and Github Container Registry
    needs: [unit-tests, code-coverage]
    # Add Permissions For Pushing Image To Github Container Registry , The Default Token Has No Write Access To Packages
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to Github Container Registry
      # by default --> this action (docker/login-action@v2) pushes to Docker Hub
      # to push to GHCR, we need to specify the registry explicitly
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} #Github Token is Automatically created by Github in Secrets

      - name: Build and Test Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image testing
        run: |
            docker images
            docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=${{ env.MONGO_URI }} \
            -e MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            -e MONGO_PASSWORD=${{ env.MONGO_PASSWORD }} \
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo "Container IP Address: $IP"

            echo Testing Image URL http://$IP:3000/live using wget
            wget -q -O - 127.0.0.1:3000/live | grep "live"
      # as the image will be running inside docker, we need to access it via localhost

      - name: Lowercase repo owner
        run: |
          echo "OWNER_LOWER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      
      - name: Docker Image Push To Docker Hub and Github Container Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: | 
            ${{ vars.DOCKER_USERNAME }}/solar-system:${{ github.sha }}
            ghcr.io/${{ env.OWNER_LOWER }}/solar-system:${{ github.sha }}